<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <settings>
        <!--开启Mybatis对标准日志的视线-->
        <setting name="logImpl" value="SLF4J"/>
    </settings>

    <!--设置连接数据库的环境-->
    <environments default="development">
        <!--一个environment环境对应一个SqlSessionFactory对象-->
        <environment id="development">
            <!--
                transactionManager标签：
                    1.作用
                    2.type属性有两个值：
                        第一个：JDBC 使用原生的JDBC代码来管理事务
                            conn.setAutoCommit(false);
                            ...
                            conn.commit()
                        第二个：MANAGED mybatis不再负责事务的管理，将事务管理交给其他的JEE(JavaEE)容器来管理：例如 spring
                   3.不区分大小写
                   4.在mybatis中提供了一个事务管理器接口：Transaction
                        该接口下有两个实现类：
                            JdbcTransaction
                            ManagedTransaction
                        如果type= “JDBC” 则底层会实例化JdbcTransaction对象
                        如果type= “MANAGED” 则底层会实例化ManagedTransaction对象
            -->
            <transactionManager type="JDBC"/>
            <!--
                dataSource配置：
                    1.为程序提供Connection对象，（但凡是为程序提供Connection对象的，都叫做数据源）
                    2.数据源实际上是一种规范，JDK中有这套规范：javaX.sql.DataSource(这个数据源的规范，这套接口实际上是JDK规定的)
                    3.我们自己也可以编写数据源组件，只要实现javaX.sql.DataSource接口就行了，实现接口当中所有的方法。这样就有了自己的数据源。
                    比如你可以写一个属于自己的数据源连接池（数据库连接池是提供连接对象的，所以数据库连接池就是一个数据源）
                    4.常见的数据源组件：
                        阿里巴巴的德鲁伊连接池：druid
                        c3p0
                        dbcp
                        ...
                    5.type属性用来指定数据源的类型，就是指定具体使用什么方式来获取Connection对象：
                        type属性有三个值:必须是三选一
                        type="[UNPOOLED|POOLED|JNDI]"
                        UNPOOLED: 不使用数据库连接池技术，每一次请求过来之后，都是创建新的Connection对象
                        POOLED: 使用mybatis自己实现的数据库连接池
                        JNDI: 集成其他第三方的数据库连接池。其实是一套规范，大部分的web容器都实现了JNDI规范
                              例如：Tomcat、Jetty、WebLogic、WebSphere，这些服务器（容器）都实现了JNDI规范
                        JNDI是：java命名目录接口。Tomcat服务器实现了这个规范
            -->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis_learn"/>
                <property name="username" value="root"/>
                <property name="password" value="xiusi3019"/>
                <!--连接池中最多的正在使用的连接对象的数量上限，最多有多少个连接可以活动，默认值10-->
                <property name="poolMaximumActiveConnections" value="5"/>
                <!--强行让某个连接空闲，超时时间的设置-->
                <property name="poolMaximumCheckoutTime" value="10000"/>
                <!--每隔2秒打印日志，并且尝试获取连接对象-->
                <property name="poolTimeToWait" value="2000"/>
                <!--最多的空闲数量-->
                <property name="poolMaximumIdleConnections" value="3"/>
            </dataSource>
        </environment>
    </environments>
    <!--引入映射文件-->
    <mappers>
        <mapper resource="mapper/UserDao.xml"/>
        <mapper resource="mapper/EmployeeDao.xml"/>
        <mapper resource="mapper/DeptDao.xml"/>
    </mappers>
</configuration>